---
- name: Create VMs
  command:
    cmd     : "pvesh create /nodes/zg-vm1/qemu/{{ vm_template_id }}/clone --newid {{ item.value.vmid }} --name {{ item.key }}"
    creates : "/etc/pve/nodes/{{ vm_host | regex_replace ('(.*?).thezengarden.net$', '\\1' ) }}/qemu-server/{{ item.value.vmid }}.conf"
  register: vm_create
  delegate_to: "{{ vm_host }}"
  with_items: "{{ lab_nodes | dict2items }}"
  when: "'vm_host' in group_names"


- name: Verify VM State
  shell:
    cmd: "qm list | grep {{ item.key | quote }} | awk '{print $3}'"
  register: running_vm
  changed_when : false
  with_items   : "{{ lab_nodes | dict2items }}"
  when         : "'vm_host' in group_names"


- name: Set VM State
  set_fact:
    lab_nodes: "{{ lab_nodes | combine ({ item.item.key: {'state': item.stdout }}, recursive=True) }}"
  loop: "{{ running_vm.results }}"
  when: "'vm_host' in group_names"


- name: Set VM Parameters
  command:
    cmd: "qm set {{ item.value.vmid }} -cores {{ item.value.cores | default('2') }} -memory {{ item.value.mem | default('1024') }}"
  delegate_to: "{{ vm_host }}"
  with_items: "{{ lab_nodes | dict2items }}"
  when:
    - "'vm_host' in group_names"
    - "item.value.state != 'running'"


- name: Set VM MAC Address and VLAN
  command:
    cmd: "qm set {{ item.value.vmid }} -net0 'virtio={{ item.value.mac }},bridge={{ lab_bridge }},tag={{ lab_vlan }}'"
  delegate_to: "{{ vm_host }}"
  with_items: "{{ lab_nodes | dict2items }}"
  when:
    - "'vm_host' in group_names"
    - "item.value.state != 'running'"


- name: Start VMs
  command:
    cmd: "qm start {{ item.value.vmid }}"
  with_items: "{{ lab_nodes | dict2items }}"
  when:
    - "'vm_host' in group_names"
    - "item.value.state != 'running'"
